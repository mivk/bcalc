#!/usr/bin/perl

use strict;
use Getopt::Long qw(:config no_ignore_case);
use Pod::Usage;
use File::Basename;

my $VERSION="0.34.1";

my $debug   = 0;
my $verbose = 0;

my $me = basename "$0";

my ($help, $h);

GetOptions(
            "help"  	=> \$help,
            "h|?"   	=> \$h,
			"debug|d" 	=> \$debug,
			"verbose|v" => \$verbose,
			"version|V"	=> sub {print "$me $VERSION\n"; exit},
);

pod2usage(-verbose => 2) if $help;
pod2usage(-verbose => 1) if ($h);

$verbose++ if $debug;

warn "$me v. $VERSION\n" if ($debug || $verbose);

my $calc_string = join('', @ARGV);
$calc_string =~ s/(at|@)/ $1 /;

warn "calc = $calc_string\n" if $debug;

my ($time, $time_str, $time_unit, $size, $size_unit, $sz_more, $op, $speed, $speed_unit);

# bcalc -v 01:1 at 10Mbits per second should give error!
# bcalc -v 1h1m at 10Mbits per second; done
	#gives: Usage: /home/linuxbrew/.linuxbrew/bin/bcalc size size_unit @ speed speed_unit
# WRONG: $ for time in 1:01 61m 3660s; do ./bcalc -v $time at 10Mbits per second; done
#bcalc v. 0.33
#1b: 1 : 01  at 10 Mega1bits per second
#61m at ...
# Wrong: 1b: 61 Mega at 10 Mega1bits per second
#4: size = 61'000'000 bytes (from Mega)

if ( $calc_string =~ /^\s* ([\d\.']+) \s* (\D+)       ([\d\.']*) \s+ (at|\@) \s+ ([\d\.']+) \s* (\D.*)/x ) {
                           ($size,         $size_unit, $sz_more,      $op,           $speed,        $speed_unit)
						 = ($1, $2, $3, $4, $5, $6);
	warn "1 : size = ", commify($size), ", size_unit = $size_unit, ", ($sz_more ? "sz_more=$sz_more, " : ""), " at ", "speed = $speed, speed_unit = $speed_unit\n" if $debug;
}
elsif ( $calc_string =~ /^\s* ([\d\.']+) \s* (\D+)       ([\d\.']*) \s+ (in) \s+ ([\d\. hms]+)/x ) {
                              ($size,         $size_unit, $sz_more,      $op,     $time_str)
							= ($1, $2, $3, $4, $5);
	warn "1 : speed = ", commify($size), ", size_unit = $size_unit, ", ($sz_more ? "sz_more=$sz_more, " : ""), " in ", "time=$time_str\n" if $debug;
} else {
	pod2usage(-verbose => 1, -exitval => 'NOEXIT');
	die "Error: Missing arguments. Nothing to calculate.\n";
}

#if ($op eq 'in') {
#
#}

warn "1 : size = ", commify($size), ", size_unit = $size_unit, ", ($sz_more ? "sz_more=$sz_more, " : ""), " at ", "speed = $speed, speed_unit = $speed_unit\n" if $debug;

# size to bytes
#if ($size_unit =~ s/(TB|terabytes?)/Terabytes/i) {
#my $bits_bytes;

## Order is important!

$size_unit =~ s/bits?$/bits/i;
$size_unit =~ s/b$/bits/;        # this one is case-sensitive
$size_unit =~ s/bytes?$/Bytes/i;
$size_unit =~ s/B$/Bytes/;       # also case-sensitive

# must be before checking for Mega
warn "size_unit = '$size_unit'\n" if $debug;
$size_unit =~ s/^h(ours?)?$/Hours/i;
$size_unit =~ s/^m(i?n|inutes?)?$/Minutes/i;
$size_unit =~ s/^s(ec|econds?)?$/Seconds/i;
warn "size_unit = '$size_unit'\n" if ($debug || $verbose);

$size_unit =~ s/^T(era)?/Tera/i;
$size_unit =~ s/^G(iga)?/Giga/i;
$size_unit =~ s/^M(ega)?(bits|Bytes)/Mega$2/i; # do not confuse with Minutes
$size_unit =~ s/^K(ilo)?/Kilo/i;
warn "size_unit = '$size_unit'\n" if ($debug || $verbose);

$speed_unit =~ s/^T(era)?/Tera/i;
$speed_unit =~ s/^G(iga)?/Giga/i;
$speed_unit =~ s/^M(ega)?/Mega/i;
$speed_unit =~ s/^K(ilo)?/Kilo/i;

$speed_unit =~ s/^(Tera|Giga|Mega|Kilo)?bits?/${1}1bits /i;
$speed_unit =~ s/^(Tera|Giga|Mega|Kilo)?b/${1}bits /;        # this one is case-sensitive
$speed_unit =~ s/^(Tera|Giga|Mega|Kilo)?bytes?/${1}Bytes /i;
$speed_unit =~ s/^(Tera|Giga|Mega|Kilo)?B/${1}Bytes /;       # also case-sensitive

$speed_unit =~ s/(bits|Bytes) p(er)?/$1 per /i;

$speed_unit =~ s/ per h(ours?)?/ per hour/i;
$speed_unit =~ s/ per m(n|in|inutes?)?/ per minute/i;
$speed_unit =~ s/ per s(econds?)?/ per second/i;

warn "1b: ", commify($size), " $size_unit", ($sz_more ? " $sz_more " : ""), " at ", "$speed $speed_unit\n" if $debug;
#warn "1b: size = ", commify($size), ", size_unit = $size_unit, ", ($sz_more ? "sz_more=$sz_more, " : ""), " at ", "speed = $speed, speed_unit = $speed_unit\n" if $debug;

if ($size_unit =~ m/^Tera/) {
	$size *= 10**12;
	warn "2 : size = ", commify($size), " bytes (from $size_unit)\n" if ($debug || $verbose);
}
elsif ($size_unit =~ m/Giga/) {
	$size *= 10**9;
	warn "3 : size = ", commify($size), " bytes (from $size_unit)\n" if ($debug || $verbose);
}
elsif ($size_unit =~ m/Mega/) {
	$size *= 10**6;
	warn "4 : size = ", commify($size), " bytes (from $size_unit)\n" if ($debug || $verbose);
}
elsif ($size_unit =~ m/Kilo/) {
	$size *= 10**3;
	warn "5 : size = ", commify($size), " bytes (from $size_unit)\n" if ($debug || $verbose);
}
elsif ($size_unit =~ s/^s(ec)?.*/seconds/i) {
	$time = $size;
	$size = 0;
	$time_unit = $size_unit;
	warn "6 : time = $time $time_unit\n" if ($debug || $verbose);
}
elsif ($size_unit =~ s/^m(n|inutes?)?.*/minutes/i) { # m, mn, minute, minutes => "minutes"
	$time = $size;
	$size = 0;
	$time *= 60;
	$time_unit = "seconds";
	if ($sz_more) { # after minutes, assume seconds
		$time += $sz_more;
	}
	warn "7 : time = $time $time_unit (from $size_unit)\n" if ($debug || $verbose);
}
elsif ($size_unit =~ s/h(ours?)?.*/hours/i) {
	$time = $size;
	$size = 0;
	$time *= 3600;
	$time_unit = "seconds";
	if ($sz_more) { # after hours, assume minutes
		$time += $sz_more * 60;
	}

	warn "8 : time = $time $time_unit (from $size_unit)\n" if ($debug || $verbose);
}



# speed from bits to bytes
if ($speed_unit =~ /bytes?/i || $speed_unit =~ /B/) {
	warn "9 : speed = ", commify($speed), " in Xbytes\n" if ($debug || $verbose);
}
elsif ($speed_unit =~ /(bit|[tTgGmMkK]?(era|iga|ega|ilo)?b)/) {
	$speed /= 8;
	warn "10: speed = ", commify($speed), " in ${1}ytes (from ${1}its)\n" if ($debug || $verbose);
}
else {
	die "speed unit bits or Bytes not found in '$speed_unit'\n";
}

# speed to "per second"
if ($speed_unit =~ /per\s*day/i) {
	$speed /= 86400;
	warn "11: speed = ", commify($speed), " per second (from days)\n" if ($debug || $verbose);
}
elsif ($speed_unit =~ /per\s*hour/i) {
	$speed /= 3600;
	warn "12: speed = ", commify($speed), " per second (from hours)\n" if ($debug || $verbose);
}
elsif ($speed_unit =~ /p(er\s*minute|m)/i) {
	$speed /= 60;
	warn "13: speed = ", commify($speed), " per second (from minutes)\n" if ($debug || $verbose);
}

# speed multiplier to bytes
if ($speed_unit =~ /^\s*T/i) {
	$speed *= 10**12;
	warn "14: speed = ", commify($speed), " in bytes per second (from T)\n" if ($debug || $verbose);
}
elsif ($speed_unit =~ /^\s*G/i) {
	$speed *= 10**9;
	warn "15: speed = ", commify($speed), " in bytes per second (from G)\n" if ($debug || $verbose);
}
elsif ($speed_unit =~ /^\s*M/i) {
	$speed *= 10**6;
	warn "16: speed = ", commify($speed), " in bytes per second (from M)\n" if ($debug || $verbose);
}
elsif ($speed_unit =~ /^\s*K/i) {
	$speed *= 10**3;
	warn "17: speed = ", commify($speed), " in bytes per second (from K)\n" if ($debug || $verbose);
}

if ($time) {
	my %results = (
		$time*$speed            =>	'Bytes',
		$time*$speed/1000       =>	'Kilobytes',
		$time*$speed/1000000    =>	'Megabytes',
		$time*$speed/1000000000	=>	'Gigabytes',
	);

	my $result = 0;
	foreach my $r (sort {$a <=> $b} keys %results) {
		if ($r > 1) {
			$result = $r;
			last;
		}
		elsif ($r > $result) {
			$result = $r;
		}
	}
	warn  commify($time), " $time_unit \@ ", commify($speed), " bytes per second = ",
		  commify($time * $speed), " bytes\n",
		  "= ",  $time * $speed / 1000, " KB.\n",
		  "= ",  $time * $speed / 1000000, " MB.\n",
		  "= ",  $time * $speed / 1000000000, " GB.\n",
		  "\n" if ($debug || $verbose);

	printf "= %.2f %-s\n", $result, $results{$result};
}
else {
	my %results = (
		$size/$speed        =>	'seconds',
		$size/$speed/60     =>	'minutes',
		$size/$speed/3600   =>	'hours',
		$size/$speed/86400	=>	'days',
	);

	my $result = 0;
	foreach my $r (sort {$a <=> $b} keys %results) {
		if ($r > 1) {
			$result = $r;
			last;
		}
		elsif ($r > $result) {
			$result = $r;
		}
	}

	warn  commify($size), " bytes \@ ", commify($speed), " bytes per second = ",
		  commify($size/$speed), " seconds\n",
		  "= ", $size/$speed/60, " minutes\n",
		  "= ", $size/$speed/3600, " hours\n",
		  "= ", $size/$speed/86400, " days\n",
		"\n" if ($debug || $verbose);

	printf "= %.2f %-s\n", $result, $results{$result};
}

sub commify {
  # from perlfaq. Changed , to '
	local $_  = shift;
	s/(^[-+]?\d+?(?=(?>(?:\d{3})+)(?!\d))|\G\d{3}(?=\d))/$1'/g;
	return $_;
}

=pod
sub time2sec {
	local $_ = join('', @_);
	warn "time2sec '$_'\n" if $debug;
	s/ //g;
	my $s;
	if () {
	}
}
=cut

=pod

=head1 NAME

bcalc - Bitrate-speed-size calculator

=head1 SYNOPSIS

bcalc [options] SIZE SIZE_UNIT @ SPEED SPEED_UNIT

or

bcalc [options] DURATION DURATION_UNIT at SPEED SPEED_UNIT

'at' can also be used instead of '@'

=head1 DESCRIPTION

Calculate the time it takes to transfer files of a given size at a given speed.
Or calculates the size of a media file for a given duration and encoding bitrate.

The spaces between arguments are optional.

=head1 SIZE UNITS

In size units, an uppercase B means Bytes (8 bits). A lowercase b means bits.
The size can be prefixed with a one-letter or full unit name. The following
are valid size units:

  b or bits
  B or Bytes
  kb or kilobits
  kB or kilobytes
  etc. with Mb, MB, Gb, GB, Tb, TB

The greatest recognize size unit is TeraBytes. That should be enough for a couple
of years...

=head1 SPEED UNITS

Speed units are the same as size untis, suffixed with "ps" (per second). For example:

  bps, Mbps, MBps Megabytesps, ...

=head1 DURATION UNITS

Valid duration units are:

  s or sec or seconds
  m or mn or minutes
  h or hours

=head1 OPTIONS

=over 8

=item B<-?> or B<-h>

Print a brief help message and exit.

=item B<--help>

Print the manual page and exit.

=item B<-v> or B<--verbose>

Print details of conversions done

=item B<-d> or B<--debug>

Print even more details of argument analysis and conversions

=item B<-V> or B<--version>

Print version and exit

=back

=head1 EXAMPLES

The following all print out the same result:

  bcalc 7 GB @ 90 KBps
  bcalc 7GB@90KBps
  bcalc 7 Giga bytes @ 90Kilobytesps
  bcalc 7 Giga bytes @ 90Kilobytespersecond
  bcalc 7 Giga bytes @ 90 Kilobytes per second
  bcalc 7 G bytes @ 90 Kilobytes per second

  = 21.60 hours

Or calculate size from duration:

  bcalc 1mn @ 120Mbps
  bcalc 1h  @ 120Mbps

=head1 INSTALL
It's just a single Perl script, but it can also be installed with apt on
Debian-based systems or with Homebrew on Mac OS X.

See https://github.com/mivk/bcalc/blob/master/install.txt

=head1 CHANGES

  0.33 : better Usage msg if missing arguments
  0.32 : clearer warning if speed_unit not found
  0.3 : accept "pm" for "per minute" as in 6GBpm

=head1 AUTHOR

mi dot deb at alma dot ch, 2010-2013,2018

=cut
